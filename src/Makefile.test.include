# Copyright (c) 2013-2016 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

TESTS += test/test_bitcoin
bin_PROGRAMS += test/test_bitcoin
noinst_PROGRAMS += test/test_bitcoin_fuzzy
TEST_SRCDIR = test
TEST_BINARY=test/test_bitcoin$(EXEEXT)

EXTRA_DIST += \
	test/bctest.py \
	test/bitcoin-util-test.py \
	test/data/bitcoin-util-test.json \
	test/data/blanktxv1.hex \
	test/data/blanktxv1.json \
	test/data/blanktxv2.hex \
	test/data/blanktxv2.json \
	test/data/tt-delin1-out.hex \
	test/data/tt-delin1-out.json \
	test/data/tt-delout1-out.hex \
	test/data/tt-delout1-out.json \
	test/data/tt-locktime317000-out.hex \
	test/data/tt-locktime317000-out.json \
	test/data/tx394b54bb.hex \
	test/data/txcreate1.hex \
	test/data/txcreate1.json \
	test/data/txcreate2.hex \
	test/data/txcreate2.json \
	test/data/txcreatedata1.hex \
	test/data/txcreatedata1.json \
	test/data/txcreatedata2.hex \
	test/data/txcreatedata2.json \
	test/data/txcreatedata_seq0.hex \
	test/data/txcreatedata_seq0.json \
	test/data/txcreatedata_seq1.hex \
	test/data/txcreatedata_seq1.json \
	test/data/txcreatemultisig1.hex \
	test/data/txcreatemultisig1.json \
	test/data/txcreatemultisig2.hex \
	test/data/txcreatemultisig2.json \
	test/data/txcreatemultisig3.hex \
	test/data/txcreatemultisig3.json \
	test/data/txcreatemultisig4.hex \
	test/data/txcreatemultisig4.json \
	test/data/txcreateoutpubkey1.hex \
	test/data/txcreateoutpubkey1.json \
	test/data/txcreateoutpubkey2.hex \
	test/data/txcreateoutpubkey2.json \
	test/data/txcreateoutpubkey3.hex \
	test/data/txcreateoutpubkey3.json \
	test/data/txcreatescript1.hex \
	test/data/txcreatescript1.json \
	test/data/txcreatescript2.hex \
	test/data/txcreatescript2.json \
	test/data/txcreatescript3.hex \
	test/data/txcreatescript3.json \
	test/data/txcreatescript4.hex \
	test/data/txcreatescript4.json \
	test/data/txcreatesignv1.hex \
	test/data/txcreatesignv1.json \
	test/data/txcreatesignv2.hex

JSON_TEST_FILES = \
  test/data/script_tests.json \
  test/data/base58_keys_valid.json \
  test/data/base58_encode_decode.json \
  test/data/base58_keys_invalid.json \
  test/data/tx_invalid.json \
  test/data/tx_valid.json \
  test/data/sighash.json

RAW_TEST_FILES =

GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)

# test_bitcoin binary #
BITCOIN_TESTS = \
  hdmint/test/hdmint_tests.cpp \
  hdmint/test/lelantus_tests.cpp \
  liblelantus/test/challenge_generator_tests.cpp \
  liblelantus/test/coin_tests.cpp \
  liblelantus/test/inner_product_test.cpp \
  liblelantus/test/joinsplit_tests.cpp \
  liblelantus/test/lelantus_primitives_tests.cpp \
  liblelantus/test/lelantus_test.cpp \
  liblelantus/test/lelantus_test_fixture.cpp \
  liblelantus/test/lelantus_test_fixture.h \
  liblelantus/test/range_proof_test.cpp \
  liblelantus/test/schnorr_test.cpp \
  liblelantus/test/serialize_test.cpp \
  liblelantus/test/sigma_extended_test.cpp \
  libspark/test/transcript_test.cpp \
  libspark/test/schnorr_test.cpp \
  libspark/test/ownership_test.cpp \
  libspark/test/chaum_test.cpp \
  libspark/test/bpplus_test.cpp \
  libspark/test/grootle_test.cpp \
  libspark/test/aead_test.cpp \
  libspark/test/encrypt_test.cpp \
  libspark/test/coin_test.cpp \
  libspark/test/mint_transaction_test.cpp \
  libspark/test/spend_transaction_test.cpp \
  libspark/test/f4grumble_test.cpp \
  libspark/test/address_test.cpp \
  test/spark_tests.cpp \
  test/spark_state_test.cpp \
  test/spark_mintspend_test.cpp \
  sigma/test/coin_spend_tests.cpp \
  sigma/test/coin_tests.cpp \
  sigma/test/primitives_tests.cpp \
  sigma/test/protocol_tests.cpp \
  sigma/test/r1_test.cpp \
  sigma/test/serialize_test.cpp \
  sigma/test/sigma_primitive_types_test.cpp \
  test/addrman_tests.cpp \
  test/allocator_tests.cpp \
  test/amount_tests.cpp \
  test/arith_uint256_tests.cpp \
  test/base32_tests.cpp \
  test/base58_tests.cpp \
  test/base64_tests.cpp \
  test/bip32_tests.cpp \
  test/bip47_test_data.h \
  test/bip47_tests.cpp \
  test/bip47_serialization_tests.cpp \
  test/blockencodings_tests.cpp \
  test/bloom_tests.cpp \
  test/bswap_tests.cpp \
  test/checkqueue_tests.cpp \
  test/coins_tests.cpp \
  test/compress_tests.cpp \
  test/crypto_tests.cpp \
  test/cuckoocache_tests.cpp \
  test/DoS_tests.cpp \
  test/fixtures.cpp \
  test/fixtures.h \
  test/getarg_tests.cpp \
  test/hash_tests.cpp \
  test/key_tests.cpp \
  test/dbwrapper_tests.cpp \
  test/lelantus_tests.cpp \
  test/lelantus_mintspend_test.cpp \
  test/lelantus_state_tests.cpp \
  test/sigma_lelantus_transition.cpp \
  test/limitedmap_tests.cpp \
  test/main_tests.cpp \
  test/mbstring_tests.cpp \
  test/mempool_tests.cpp \
  test/merkle_tests.cpp \
  test/miner_tests.cpp \
  test/mtp_halving_tests.cpp \
  test/mtp_tests.cpp \
  test/mtp_trans_tests.cpp \
  test/firopow_tests.cpp \
  test/multisig_tests.cpp \
  test/netbase_tests.cpp \
  test/net_tests.cpp \
  test/pmt_tests.cpp \
  test/prevector_tests.cpp \
  test/raii_event_tests.cpp \
  test/random_tests.cpp \
  test/reverselock_tests.cpp \
  test/rpc_tests.cpp \
  test/sanity_tests.cpp \
  test/scheduler_tests.cpp \
  test/scriptnum10.h \
  test/scriptnum_tests.cpp \
  test/script_P2SH_tests.cpp \
  test/script_tests.cpp \
  test/serialize_tests.cpp \
  test/sighash_tests.cpp \
  test/sigma_manymintspend_test.cpp \
  test/sigma_mintspend_numinputs.cpp \
  test/sigma_mintspend_test.cpp \
  test/sigma_partialspend_mempool_tests.cpp \
  test/sigma_state_tests.cpp \
  test/sigopcount_tests.cpp \
  test/skiplist_tests.cpp \
  test/streams_tests.cpp \
  test/test_bitcoin.cpp \
  test/test_bitcoin.h \
  test/test_random.h \
  test/testutil.cpp \
  test/testutil.h \
  test/timedata_tests.cpp \
  test/transaction_tests.cpp \
  test/txdb_tests.cpp \
  test/txvalidationcache_tests.cpp \
  test/uint256_tests.cpp \
  test/univalue_tests.cpp \
  test/util_tests.cpp \
  test/multiexponentation_test.cpp \
  test/firsthalving_tests.cpp \
  test/evospork_tests.cpp \
  test/evo_deterministicmns_tests.cpp \
  test/evo_simplifiedmns_tests.cpp \
  test/progpow_tests.cpp \
  test/bls_tests.cpp \
  libspark/spats/test/bpplus_test.cpp \
  libspark/spats/test/coin_test.cpp \
  libspark/spats/test/type_test.cpp \
  libspark/spats/test/base_asset_test.cpp \
  libspark/spats/test/mint_transaction_test.cpp \
  libspark/spats/test/spend_transaction_test.cpp \
  libspark/spats/test/balance_test.cpp


if ENABLE_WALLET
BITCOIN_TESTS += \
  wallet/test/wallet_test_fixture.cpp \
  wallet/test/wallet_test_fixture.h \
  wallet/test/accounting_tests.cpp \
  wallet/test/wallet_tests.cpp \
  wallet/test/crypto_tests.cpp \
  wallet/test/lelantus_tests.cpp \
  wallet/test/spark_tests.cpp \
  wallet/test/sigma_tests.cpp \
  wallet/test/mnemonic_tests.cpp \
  wallet/test/txbuilder_tests.cpp
endif

test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) -ltor

test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)
test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)
test_test_bitcoin_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBFIRO_SIGMA) $(LIBLELANTUS) $(LIBSPARK) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \
  $(BACKTRACE_LIB) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_PTHREADS_LIBS) $(ZMQ_LIBS) $(ZLIB_LIBS)
test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
if ENABLE_WALLET
test_test_bitcoin_LDADD += libbitcoin_server_a-netfulfilledman.o $(LIBBITCOIN_WALLET)
endif

test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)
test_test_bitcoin_LDFLAGS = $(LDFLAGS_WRAP_EXCEPTIONS) $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static

if ENABLE_ZMQ
test_test_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)
endif
#

test_test_bitcoin_LDADD += $(LIBBLSSIG_LIBS) $(LIBBLSSIG_DEPENDS)

# test_bitcoin_fuzzy binary #
test_test_bitcoin_fuzzy_SOURCES = test/test_bitcoin_fuzzy.cpp
test_test_bitcoin_fuzzy_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
test_test_bitcoin_fuzzy_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
test_test_bitcoin_fuzzy_LDFLAGS = $(LDFLAGS_WRAP_EXCEPTIONS) $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) $(LIBFIRO_SIGMA)

test_test_bitcoin_fuzzy_LDADD = \
  $(LIBUNIVALUE) \
  $(LIBBITCOIN_SERVER) \
  $(LIBLELANTUS) \
  $(LIBSPARK) \
  $(LIBBITCOIN_COMMON) \
  $(LIBBITCOIN_UTIL) \
  $(LIBBITCOIN_CONSENSUS) \
  $(LIBBITCOIN_CRYPTO) \
  $(LIBSECP256K1)

test_test_bitcoin_fuzzy_LDADD += $(BACKTRACE_LIB) $(BOOST_LIBS) $(CRYPTO_LIBS)
#

test_test_bitcoin_fuzzy_LDADD += $(LIBBLSSIG_LIBS) $(LIBBLSSIG_DEPENDS)

nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)

$(BITCOIN_TESTS): $(GENERATED_TEST_FILES)

CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)

CLEANFILES += $(CLEAN_BITCOIN_TEST)

# This file is problematic for out-of-tree builds if it exists.
DISTCLEANFILES += test/buildenv.pyc

bitcoin_test: $(TEST_BINARY)

bitcoin_test_check: $(TEST_BINARY) FORCE
	$(MAKE) check-TESTS TESTS=$^

bitcoin_test_clean : FORCE
	rm -f $(CLEAN_BITCOIN_TEST) $(test_test_bitcoin_OBJECTS) $(TEST_BINARY)

check-local:
	@echo "Running test/bitcoin-util-test.py..."
#	$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(PYTHON) $(srcdir)/test/bitcoin-util-test.py
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check
if EMBEDDED_UNIVALUE
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check
endif

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@{ \
	 echo "namespace json_tests{" && \
	 echo "static unsigned const char $(*F)[] = {" && \
	 $(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' && \
	 echo "};};"; \
	} > "$@.new" && mv -f "$@.new" "$@"
	@echo "Generated $@"
